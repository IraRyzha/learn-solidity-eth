/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Payments {
  export type PaymentStruct = {
    amount: BigNumberish;
    timestamp: BigNumberish;
    from: AddressLike;
    message: string;
  };

  export type PaymentStructOutput = [
    amount: bigint,
    timestamp: bigint,
    from: string,
    message: string
  ] & { amount: bigint; timestamp: bigint; from: string; message: string };
}

export interface PaymentsInterface extends Interface {
  getFunction(
    nameOrSignature: "balances" | "currentBalance" | "getPayment" | "pay"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "balances",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "currentBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPayment",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pay", values: [string]): string;

  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPayment", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pay", data: BytesLike): Result;
}

export interface Payments extends BaseContract {
  connect(runner?: ContractRunner | null): Payments;
  waitForDeployment(): Promise<this>;

  interface: PaymentsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  balances: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  currentBalance: TypedContractMethod<[], [bigint], "view">;

  getPayment: TypedContractMethod<
    [_addr: AddressLike, _index: BigNumberish],
    [Payments.PaymentStructOutput],
    "view"
  >;

  pay: TypedContractMethod<[message: string], [bigint], "payable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "balances"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "currentBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPayment"
  ): TypedContractMethod<
    [_addr: AddressLike, _index: BigNumberish],
    [Payments.PaymentStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "pay"
  ): TypedContractMethod<[message: string], [bigint], "payable">;

  filters: {};
}
