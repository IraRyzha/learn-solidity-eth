/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "Album",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Album__factory>;
    getContractFactory(
      name: "AlbumTracker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AlbumTracker__factory>;
    getContractFactory(
      name: "AuctionEngine",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AuctionEngine__factory>;
    getContractFactory(
      name: "Demo",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Demo__factory>;
    getContractFactory(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Errors__factory>;
    getContractFactory(
      name: "DutchAuction",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DutchAuction__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "Greeter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Greeter__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "ILogger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILogger__factory>;
    getContractFactory(
      name: "LibDemo",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibDemo__factory>;
    getContractFactory(
      name: "Logger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Logger__factory>;
    getContractFactory(
      name: "Marketplace",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Marketplace__factory>;
    getContractFactory(
      name: "Payments",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Payments__factory>;
    getContractFactory(
      name: "Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Receiver__factory>;
    getContractFactory(
      name: "Transfers",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Transfers__factory>;

    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "Album",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Album>;
    getContractAt(
      name: "AlbumTracker",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AlbumTracker>;
    getContractAt(
      name: "AuctionEngine",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AuctionEngine>;
    getContractAt(
      name: "Demo",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Demo>;
    getContractAt(
      name: "IERC20Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Errors>;
    getContractAt(
      name: "DutchAuction",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DutchAuction>;
    getContractAt(
      name: "ERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "Greeter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Greeter>;
    getContractAt(
      name: "IERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "ILogger",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ILogger>;
    getContractAt(
      name: "LibDemo",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LibDemo>;
    getContractAt(
      name: "Logger",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Logger>;
    getContractAt(
      name: "Marketplace",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Marketplace>;
    getContractAt(
      name: "Payments",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Payments>;
    getContractAt(
      name: "Receiver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Receiver>;
    getContractAt(
      name: "Transfers",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Transfers>;

    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "Album",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Album>;
    deployContract(
      name: "AlbumTracker",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AlbumTracker>;
    deployContract(
      name: "AuctionEngine",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AuctionEngine>;
    deployContract(
      name: "Demo",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Demo>;
    deployContract(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "DutchAuction",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DutchAuction>;
    deployContract(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "Greeter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Greeter>;
    deployContract(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "ILogger",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILogger>;
    deployContract(
      name: "LibDemo",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LibDemo>;
    deployContract(
      name: "Logger",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Logger>;
    deployContract(
      name: "Marketplace",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Marketplace>;
    deployContract(
      name: "Payments",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Payments>;
    deployContract(
      name: "Receiver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Receiver>;
    deployContract(
      name: "Transfers",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Transfers>;

    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "Album",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Album>;
    deployContract(
      name: "AlbumTracker",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AlbumTracker>;
    deployContract(
      name: "AuctionEngine",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AuctionEngine>;
    deployContract(
      name: "Demo",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Demo>;
    deployContract(
      name: "IERC20Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "DutchAuction",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DutchAuction>;
    deployContract(
      name: "ERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "Greeter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Greeter>;
    deployContract(
      name: "IERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "ILogger",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILogger>;
    deployContract(
      name: "LibDemo",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LibDemo>;
    deployContract(
      name: "Logger",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Logger>;
    deployContract(
      name: "Marketplace",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Marketplace>;
    deployContract(
      name: "Payments",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Payments>;
    deployContract(
      name: "Receiver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Receiver>;
    deployContract(
      name: "Transfers",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Transfers>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
