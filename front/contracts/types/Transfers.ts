/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Transfers {
  export type TransferStruct = {
    amount: BigNumberish;
    timestamp: BigNumberish;
    sender: AddressLike;
  };

  export type TransferStructOutput = [
    amount: bigint,
    timestamp: bigint,
    sender: string
  ] & { amount: bigint; timestamp: bigint; sender: string };
}

export interface TransfersInterface extends Interface {
  getFunction(nameOrSignature: "getTransfer" | "withdrawTo"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getTransfer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTo",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdrawTo", data: BytesLike): Result;
}

export interface Transfers extends BaseContract {
  connect(runner?: ContractRunner | null): Transfers;
  waitForDeployment(): Promise<this>;

  interface: TransfersInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getTransfer: TypedContractMethod<
    [_index: BigNumberish],
    [Transfers.TransferStructOutput],
    "view"
  >;

  withdrawTo: TypedContractMethod<[_to: AddressLike], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getTransfer"
  ): TypedContractMethod<
    [_index: BigNumberish],
    [Transfers.TransferStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawTo"
  ): TypedContractMethod<[_to: AddressLike], [void], "nonpayable">;

  filters: {};
}
